#!/usr/bin/env node

var chalk = require('chalk');
var format = require('../lib/formatters');
var pkg = require('../package.json');
var program = require('commander');
var checker = require('..');

/**
 * CLI configuration.
 */

program
  .version(pkg.version)
  .usage('[options] <files/urls ...>')
  .option('-a, --api <url>', 'Overrides the default API endpoint', 'https://validator.nu/')
  .option('-c, --concurrency <number>', 'Sets the concurrency of the batch processing', 5)
  .option('-f, --formatter <formatter>', 'Choose the formatter to use. (stylish, json)', 'stylish')
  .parse(process.argv);

/**
 * Run the validator.
 */

var batch = checker.validate(program.args, program.opts());

switch (program.formatter) {
case 'stylish':
  batch
    .on('progress', function (e) {
      var data = checker.format(program.formatter, e.value);
      process.stdout.write(data);
      process.stdout.write('\n\n');
    })
    .end(function (err) {
    if (err) {
      process.stderr.write(error(err));
      process.stderr.write('\n\n');
    }
  });
  break;

case 'json':
  batch
    .throws(false)
    .end(function (errors, results) {
      if (errors && errors.length) {
        errors.forEach(function (err) {
          if (err) {
            process.stderr.write(error(err));
            process.stderr.write('\n\n');
          }
        })
      }

      process.stdout.write(checker.format(program.formatter, results));
      process.stdout.write('\n\n');
    });
  break;
}

/**
 * Format an error message.
 *
 * @param {Error} err
 * @returns {String}
 */

function error(err) {
  return chalk.red(err.stack);
}
